let loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));
function loginUser(username) {
    const user = { username: username, expiresAt: new Date().getTime() + 3600000 }; // V√≠ d·ª• th·ªùi gian h·∫øt h·∫°n l√† 1 gi·ªù
    localStorage.setItem(`loggedInUser_${username}`, JSON.stringify(user));
}
function getLoggedInUser(username) {
    const user = JSON.parse(localStorage.getItem(`loggedInUser_${username}`));
    if (user && new Date().getTime() < user.expiresAt) {
        return user;
    }
    return null; // N·∫øu kh√¥ng c√≥ ho·∫∑c h·∫øt h·∫°n
}

if (!loggedInUser || new Date().getTime() > loggedInUser.expiresAt) {
    // Hi·ªÉn th·ªã th√¥ng b√°o khi ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c phi√™n h·∫øt h·∫°n
    const loginAlert = document.getElementById('loginAlert');
    loginAlert.style.display = 'block';

    // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang ƒëƒÉng nh·∫≠p sau m·ªôt th·ªùi gian
    setTimeout(() => {
        window.location.href = "index.html"; 
    }, 3000); // Ch·ªù 3 gi√¢y tr∆∞·ªõc khi chuy·ªÉn h∆∞·ªõng
} else {
    // Hi·ªÉn th·ªã t√™n ng∆∞·ªùi d√πng sau khi ƒë√£ ƒëƒÉng nh·∫≠p
    document.getElementById('username').innerText = loggedInUser.username;
}

// ƒê√≥ng th√¥ng b√°o khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "ƒê√≥ng"
document.getElementById('closeAlert').addEventListener('click', () => {
    document.getElementById('loginAlert').style.display = 'none';
});


function logout() {
    localStorage.removeItem('loggedInUser');
    window.location.href = "index.html";
}

document.getElementById('logoutButton').addEventListener('click', logout);

const commentInput = document.getElementById('commentInput');
const commentsList = document.getElementById('commentsList');
const sendButton = document.getElementById('sendButton');

function submitComment() {
    const commentText = commentInput.value;
    if (commentText.trim().length === 0) {
        return;
    }

    if (!loggedInUser) {
        const loginAlert = document.getElementById('loginAlert');
        loginAlert.style.display = 'block';
        setTimeout(() => {
            window.location.href = "index.html";
        }, 3000); // Ch·ªù 3 gi√¢y tr∆∞·ªõc khi chuy·ªÉn h∆∞·ªõng
        return;
    }

    let comments = JSON.parse(localStorage.getItem('comments')) || [];
    const newComment = { text: commentText, username: loggedInUser.username, isFavorite: false };
    comments.push(newComment);
    localStorage.setItem('comments', JSON.stringify(comments));

    displayComments();
    commentInput.value = '';
    commentsList.scrollTop = commentsList.scrollHeight;
}
console.log("D·ªØ li·ªáu l∆∞u trong localStorage:", JSON.parse(localStorage.getItem('comments')));

function displayComments() {
    const comments = JSON.parse(localStorage.getItem('comments')) || [];
    const userLiked = JSON.parse(localStorage.getItem('userLiked')) || {}; // L∆∞u tr·∫°ng th√°i tim c·ªßa user

    commentsList.innerHTML = ''; // X√≥a t·∫•t c·∫£ b√¨nh lu·∫≠n hi·ªán c√≥

    comments.forEach((comment, index) => {
        const commentDiv = document.createElement('div');
        commentDiv.classList.add('message');
        commentDiv.innerHTML = `<strong>${comment.username}:</strong> ${comment.text}`;

        // N√∫t thu h·ªìi (ch·ªâ hi·ªÉn th·ªã n·∫øu l√† tin nh·∫Øn c·ªßa ch√≠nh m√¨nh)
        if (loggedInUser && comment.username === loggedInUser.username) {
            const revokeBtn = document.createElement('span');
            revokeBtn.classList.add('icon', 'revoke-btn');
            revokeBtn.innerHTML = '<i class="bx bx-undo"></i>';
            revokeBtn.title = 'Thu h·ªìi tin nh·∫Øn';
            revokeBtn.addEventListener('click', () => confirmRevoke(index));
            commentDiv.appendChild(revokeBtn);
        }

        if (comment.favoriteCount === undefined) {
            comment.favoriteCount = 0;
        }

        let commentKey = `comment_${index}_${loggedInUser.username}`; // M·ªói user c√≥ tr·∫°ng th√°i tim ri√™ng
        let isUserLiked = userLiked[commentKey] ? true : false; // Ki·ªÉm tra user ƒë√£ tim hay ch∆∞a

        // N√∫t th·∫£ tim
        const favoriteBtn = document.createElement('span');
        favoriteBtn.classList.add('favorite-btn');
        favoriteBtn.innerHTML = isUserLiked ? `‚ù§Ô∏è ${comment.favoriteCount}` : `ü§ç ${comment.favoriteCount}`;
        favoriteBtn.title = "Th·∫£ tim";
        favoriteBtn.addEventListener('click', () => toggleFavoriteMessage(index));

        commentDiv.appendChild(favoriteBtn);
        commentsList.appendChild(commentDiv);
    });

    // C·∫≠p nh·∫≠t l·∫°i storage ƒë·ªÉ tr√°nh l·ªói
    localStorage.setItem('comments', JSON.stringify(comments));
}

window.onload = function () {
    displayComments();
};

function toggleFavoriteMessage(index) {
    let comments = JSON.parse(localStorage.getItem('comments')) || [];
    let userLiked = JSON.parse(localStorage.getItem('userLiked')) || {}; // L·∫•y tr·∫°ng th√°i tim ri√™ng

    if (!comments[index]) return; // Ki·ªÉm tra t·ªìn t·∫°i
    let comment = comments[index];

    if (comment.favoriteCount === undefined) {
        comment.favoriteCount = 0;
    }

    let commentKey = `comment_${index}_${loggedInUser.username}`;

    if (userLiked[commentKey]) {
        comment.favoriteCount--; // N·∫øu ƒë√£ th·∫£ tim tr∆∞·ªõc ƒë√≥, gi·∫£m -1
        delete userLiked[commentKey]; // X√≥a tr·∫°ng th√°i c·ªßa user
    } else {
        comment.favoriteCount++; // N·∫øu ch∆∞a tim, tƒÉng +1
        userLiked[commentKey] = true; // ƒê√°nh d·∫•u ƒë√£ tim
    }

    // L∆∞u l·∫°i v√†o localStorage
    localStorage.setItem('comments', JSON.stringify(comments));
    localStorage.setItem('userLiked', JSON.stringify(userLiked));

    displayComments();
}





function confirmRevoke(index) {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën thu h·ªìi tin nh·∫Øn n√†y?')) {
        revokeComment(index);
    }
}

function revokeComment(index) {
    let comments = JSON.parse(localStorage.getItem('comments')) || [];
    comments.splice(index, 1);
    localStorage.setItem('comments', JSON.stringify(comments));
    displayComments();
}

function addEmoji(emoji) {
    commentInput.value += emoji;
    commentInput.focus();
}

function autoEmoji() {
    const emojiMap = {
        ':)': 'üòä',
        ':D': 'üòÑ',
        ':P': 'üòõ',
        ':O': 'üò≤'
    };
    let text = commentInput.value;
    for (const [key, value] of Object.entries(emojiMap)) {
        text = text.replace(new RegExp(key, 'g'), value);
    }
    commentInput.value = text;
}

function checkEnter(event) {
    if (event.key === "Enter" && !event.shiftKey) {
        event.preventDefault();
        submitComment();
    }
}

commentInput.addEventListener('keydown', checkEnter);

sendButton.addEventListener('click', submitComment);

window.onload = function() {
    displayComments(); 
};
